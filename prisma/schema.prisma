generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Review {
  id            Int      @id @default(autoincrement())
  fullname      String
  rate          Int      @db.SmallInt
  description   String?  @db.Text
  userPosition  String?
  datetime      DateTime
  userLocale    String   @default("ru") @map("user_locale")
  addedBy       User     @relation(fields: [addedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addedByUserId Int      @map("added_by_user_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  imagePath     String?  @map("image_path")

  @@map("reviews")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  imagePath   String?  @map("image_path")
  startDate   DateTime @map("start_date") @db.Date
  isVisible   Boolean  @map("is_visible")
  partnerId   Int?     @map("partner_id")
  directionId Int?     @map("direction_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  partner   Partner?          @relation(fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  direction DevDirection?     @relation(fields: [directionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees ProjectEmployee[]

  @@map("projects")
}

model Partner {
  id        Int      @id @default(autoincrement())
  name      String?
  imagePath String?  @map("image_path")
  url       String?
  isVisible Boolean? @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects Project[]

  @@map("partners")
}

model DevDirection {
  id           Int      @id @default(autoincrement())
  shortName    String?  @map("short_name")
  rawName      String   @unique @map("raw_name") // ключ для получения локализации
  durationDays Int      @map("duration_days")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  imagePath    String?  @map("image_path")

  projects Project[]

  @@map("devdirections")
}

model Employee {
  id              Int       @id @default(autoincrement())
  firstName       String    @map("first_name")
  lastName        String    @map("last_name")
  imagePath       String?   @map("image_path")
  tags            String?
  birthDate       DateTime? @map("birth_date") @db.Date
  isVisible       Boolean   @map("is_visible")
  email           String?
  role            String?
  nickname        String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  projects ProjectEmployee[]

  @@map("employees")
}

model ProjectEmployee {
  projectId  Int @map("project_id")
  employeeId Int @map("employee_id")

  project  Project  @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([projectId, employeeId])
  @@map("projects_employees")
}

model Localization {
  id         Int      @id @default(autoincrement())
  section    String   @map("section")
  rawName    String   @map("raw_name")
  localeCode String   @map("locale_code")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([section, rawName, localeCode])
  @@index([rawName, section], name: "localizations_index")
  @@map("localizations")
}

model RefTable {
  name      String   @id @unique
  content   Json
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ref_tables")
}

model User {
  id        Int      @id @default(autoincrement())
  fullname  String
  isStaff   Boolean  @default(true) @map("is_staff")
  pwdhash   String
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  reviews Review[]

  @@map("users")
}

model DynamicTranslationBuffer {
  id                  Int    @id @default(autoincrement())
  scope               String
  sourceId            Int    @map("source_id")
  localeCode          String @map("locale_code")
  message             String @db.Text
  originalMessageHash String @map("message_hash")

  @@map("dynamic_translations")
  @@unique([scope, sourceId])
  @@index([scope], name: "dynamic_translations_index")
}
